
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model verification_logs
 * 
 */
export type verification_logs = $Result.DefaultSelection<Prisma.$verification_logsPayload>
/**
 * Model face_registrations
 * 
 */
export type face_registrations = $Result.DefaultSelection<Prisma.$face_registrationsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification_logs`: Exposes CRUD operations for the **verification_logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verification_logs
    * const verification_logs = await prisma.verification_logs.findMany()
    * ```
    */
  get verification_logs(): Prisma.verification_logsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.face_registrations`: Exposes CRUD operations for the **face_registrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Face_registrations
    * const face_registrations = await prisma.face_registrations.findMany()
    * ```
    */
  get face_registrations(): Prisma.face_registrationsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    verification_logs: 'verification_logs',
    face_registrations: 'face_registrations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "verification_logs" | "face_registrations"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      verification_logs: {
        payload: Prisma.$verification_logsPayload<ExtArgs>
        fields: Prisma.verification_logsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.verification_logsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.verification_logsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          findFirst: {
            args: Prisma.verification_logsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.verification_logsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          findMany: {
            args: Prisma.verification_logsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>[]
          }
          create: {
            args: Prisma.verification_logsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          createMany: {
            args: Prisma.verification_logsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.verification_logsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>[]
          }
          delete: {
            args: Prisma.verification_logsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          update: {
            args: Prisma.verification_logsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          deleteMany: {
            args: Prisma.verification_logsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.verification_logsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.verification_logsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>[]
          }
          upsert: {
            args: Prisma.verification_logsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$verification_logsPayload>
          }
          aggregate: {
            args: Prisma.Verification_logsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification_logs>
          }
          groupBy: {
            args: Prisma.verification_logsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Verification_logsGroupByOutputType>[]
          }
          count: {
            args: Prisma.verification_logsCountArgs<ExtArgs>
            result: $Utils.Optional<Verification_logsCountAggregateOutputType> | number
          }
        }
      }
      face_registrations: {
        payload: Prisma.$face_registrationsPayload<ExtArgs>
        fields: Prisma.face_registrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.face_registrationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.face_registrationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          findFirst: {
            args: Prisma.face_registrationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.face_registrationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          findMany: {
            args: Prisma.face_registrationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>[]
          }
          create: {
            args: Prisma.face_registrationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          createMany: {
            args: Prisma.face_registrationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.face_registrationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>[]
          }
          delete: {
            args: Prisma.face_registrationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          update: {
            args: Prisma.face_registrationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          deleteMany: {
            args: Prisma.face_registrationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.face_registrationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.face_registrationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>[]
          }
          upsert: {
            args: Prisma.face_registrationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$face_registrationsPayload>
          }
          aggregate: {
            args: Prisma.Face_registrationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFace_registrations>
          }
          groupBy: {
            args: Prisma.face_registrationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Face_registrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.face_registrationsCountArgs<ExtArgs>
            result: $Utils.Optional<Face_registrationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    verification_logs?: verification_logsOmit
    face_registrations?: face_registrationsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    verification_logs: number
    face_registrations: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verification_logs?: boolean | UsersCountOutputTypeCountVerification_logsArgs
    face_registrations?: boolean | UsersCountOutputTypeCountFace_registrationsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountVerification_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: verification_logsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFace_registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: face_registrationsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    username: string | null
    full_name: string | null
    created_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    username: string | null
    full_name: string | null
    created_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    full_name: number
    created_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    full_name?: true
    created_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    full_name?: true
    created_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    full_name?: true
    created_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    username: string
    full_name: string | null
    created_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    full_name?: boolean
    created_at?: boolean
    verification_logs?: boolean | users$verification_logsArgs<ExtArgs>
    face_registrations?: boolean | users$face_registrationsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    full_name?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    full_name?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    full_name?: boolean
    created_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "full_name" | "created_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    verification_logs?: boolean | users$verification_logsArgs<ExtArgs>
    face_registrations?: boolean | users$face_registrationsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      verification_logs: Prisma.$verification_logsPayload<ExtArgs>[]
      face_registrations: Prisma.$face_registrationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      full_name: string | null
      created_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    verification_logs<T extends users$verification_logsArgs<ExtArgs> = {}>(args?: Subset<T, users$verification_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    face_registrations<T extends users$face_registrationsArgs<ExtArgs> = {}>(args?: Subset<T, users$face_registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly username: FieldRef<"users", 'String'>
    readonly full_name: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.verification_logs
   */
  export type users$verification_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    where?: verification_logsWhereInput
    orderBy?: verification_logsOrderByWithRelationInput | verification_logsOrderByWithRelationInput[]
    cursor?: verification_logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Verification_logsScalarFieldEnum | Verification_logsScalarFieldEnum[]
  }

  /**
   * users.face_registrations
   */
  export type users$face_registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    where?: face_registrationsWhereInput
    orderBy?: face_registrationsOrderByWithRelationInput | face_registrationsOrderByWithRelationInput[]
    cursor?: face_registrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Face_registrationsScalarFieldEnum | Face_registrationsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model verification_logs
   */

  export type AggregateVerification_logs = {
    _count: Verification_logsCountAggregateOutputType | null
    _avg: Verification_logsAvgAggregateOutputType | null
    _sum: Verification_logsSumAggregateOutputType | null
    _min: Verification_logsMinAggregateOutputType | null
    _max: Verification_logsMaxAggregateOutputType | null
  }

  export type Verification_logsAvgAggregateOutputType = {
    confidence: number | null
  }

  export type Verification_logsSumAggregateOutputType = {
    confidence: number | null
  }

  export type Verification_logsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    face_id: string | null
    mask_detected: boolean | null
    result: boolean | null
    confidence: number | null
    verified_at: Date | null
    is_spoofing: boolean | null
  }

  export type Verification_logsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    face_id: string | null
    mask_detected: boolean | null
    result: boolean | null
    confidence: number | null
    verified_at: Date | null
    is_spoofing: boolean | null
  }

  export type Verification_logsCountAggregateOutputType = {
    id: number
    user_id: number
    face_id: number
    mask_detected: number
    result: number
    confidence: number
    verified_at: number
    is_spoofing: number
    meta_data: number
    _all: number
  }


  export type Verification_logsAvgAggregateInputType = {
    confidence?: true
  }

  export type Verification_logsSumAggregateInputType = {
    confidence?: true
  }

  export type Verification_logsMinAggregateInputType = {
    id?: true
    user_id?: true
    face_id?: true
    mask_detected?: true
    result?: true
    confidence?: true
    verified_at?: true
    is_spoofing?: true
  }

  export type Verification_logsMaxAggregateInputType = {
    id?: true
    user_id?: true
    face_id?: true
    mask_detected?: true
    result?: true
    confidence?: true
    verified_at?: true
    is_spoofing?: true
  }

  export type Verification_logsCountAggregateInputType = {
    id?: true
    user_id?: true
    face_id?: true
    mask_detected?: true
    result?: true
    confidence?: true
    verified_at?: true
    is_spoofing?: true
    meta_data?: true
    _all?: true
  }

  export type Verification_logsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verification_logs to aggregate.
     */
    where?: verification_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verification_logs to fetch.
     */
    orderBy?: verification_logsOrderByWithRelationInput | verification_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: verification_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verification_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verification_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned verification_logs
    **/
    _count?: true | Verification_logsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Verification_logsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Verification_logsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Verification_logsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Verification_logsMaxAggregateInputType
  }

  export type GetVerification_logsAggregateType<T extends Verification_logsAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification_logs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification_logs[P]>
      : GetScalarType<T[P], AggregateVerification_logs[P]>
  }




  export type verification_logsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: verification_logsWhereInput
    orderBy?: verification_logsOrderByWithAggregationInput | verification_logsOrderByWithAggregationInput[]
    by: Verification_logsScalarFieldEnum[] | Verification_logsScalarFieldEnum
    having?: verification_logsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Verification_logsCountAggregateInputType | true
    _avg?: Verification_logsAvgAggregateInputType
    _sum?: Verification_logsSumAggregateInputType
    _min?: Verification_logsMinAggregateInputType
    _max?: Verification_logsMaxAggregateInputType
  }

  export type Verification_logsGroupByOutputType = {
    id: string
    user_id: string | null
    face_id: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date
    is_spoofing: boolean
    meta_data: JsonValue | null
    _count: Verification_logsCountAggregateOutputType | null
    _avg: Verification_logsAvgAggregateOutputType | null
    _sum: Verification_logsSumAggregateOutputType | null
    _min: Verification_logsMinAggregateOutputType | null
    _max: Verification_logsMaxAggregateOutputType | null
  }

  type GetVerification_logsGroupByPayload<T extends verification_logsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Verification_logsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Verification_logsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Verification_logsGroupByOutputType[P]>
            : GetScalarType<T[P], Verification_logsGroupByOutputType[P]>
        }
      >
    >


  export type verification_logsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id?: boolean
    mask_detected?: boolean
    result?: boolean
    confidence?: boolean
    verified_at?: boolean
    is_spoofing?: boolean
    meta_data?: boolean
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }, ExtArgs["result"]["verification_logs"]>

  export type verification_logsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id?: boolean
    mask_detected?: boolean
    result?: boolean
    confidence?: boolean
    verified_at?: boolean
    is_spoofing?: boolean
    meta_data?: boolean
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }, ExtArgs["result"]["verification_logs"]>

  export type verification_logsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id?: boolean
    mask_detected?: boolean
    result?: boolean
    confidence?: boolean
    verified_at?: boolean
    is_spoofing?: boolean
    meta_data?: boolean
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }, ExtArgs["result"]["verification_logs"]>

  export type verification_logsSelectScalar = {
    id?: boolean
    user_id?: boolean
    face_id?: boolean
    mask_detected?: boolean
    result?: boolean
    confidence?: boolean
    verified_at?: boolean
    is_spoofing?: boolean
    meta_data?: boolean
  }

  export type verification_logsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "face_id" | "mask_detected" | "result" | "confidence" | "verified_at" | "is_spoofing" | "meta_data", ExtArgs["result"]["verification_logs"]>
  export type verification_logsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }
  export type verification_logsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }
  export type verification_logsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | verification_logs$userArgs<ExtArgs>
  }

  export type $verification_logsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "verification_logs"
    objects: {
      user: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string | null
      face_id: string | null
      mask_detected: boolean
      result: boolean
      confidence: number
      verified_at: Date
      is_spoofing: boolean
      meta_data: Prisma.JsonValue | null
    }, ExtArgs["result"]["verification_logs"]>
    composites: {}
  }

  type verification_logsGetPayload<S extends boolean | null | undefined | verification_logsDefaultArgs> = $Result.GetResult<Prisma.$verification_logsPayload, S>

  type verification_logsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<verification_logsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Verification_logsCountAggregateInputType | true
    }

  export interface verification_logsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['verification_logs'], meta: { name: 'verification_logs' } }
    /**
     * Find zero or one Verification_logs that matches the filter.
     * @param {verification_logsFindUniqueArgs} args - Arguments to find a Verification_logs
     * @example
     * // Get one Verification_logs
     * const verification_logs = await prisma.verification_logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends verification_logsFindUniqueArgs>(args: SelectSubset<T, verification_logsFindUniqueArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification_logs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {verification_logsFindUniqueOrThrowArgs} args - Arguments to find a Verification_logs
     * @example
     * // Get one Verification_logs
     * const verification_logs = await prisma.verification_logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends verification_logsFindUniqueOrThrowArgs>(args: SelectSubset<T, verification_logsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsFindFirstArgs} args - Arguments to find a Verification_logs
     * @example
     * // Get one Verification_logs
     * const verification_logs = await prisma.verification_logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends verification_logsFindFirstArgs>(args?: SelectSubset<T, verification_logsFindFirstArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification_logs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsFindFirstOrThrowArgs} args - Arguments to find a Verification_logs
     * @example
     * // Get one Verification_logs
     * const verification_logs = await prisma.verification_logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends verification_logsFindFirstOrThrowArgs>(args?: SelectSubset<T, verification_logsFindFirstOrThrowArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verification_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verification_logs
     * const verification_logs = await prisma.verification_logs.findMany()
     * 
     * // Get first 10 Verification_logs
     * const verification_logs = await prisma.verification_logs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verification_logsWithIdOnly = await prisma.verification_logs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends verification_logsFindManyArgs>(args?: SelectSubset<T, verification_logsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification_logs.
     * @param {verification_logsCreateArgs} args - Arguments to create a Verification_logs.
     * @example
     * // Create one Verification_logs
     * const Verification_logs = await prisma.verification_logs.create({
     *   data: {
     *     // ... data to create a Verification_logs
     *   }
     * })
     * 
     */
    create<T extends verification_logsCreateArgs>(args: SelectSubset<T, verification_logsCreateArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verification_logs.
     * @param {verification_logsCreateManyArgs} args - Arguments to create many Verification_logs.
     * @example
     * // Create many Verification_logs
     * const verification_logs = await prisma.verification_logs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends verification_logsCreateManyArgs>(args?: SelectSubset<T, verification_logsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verification_logs and returns the data saved in the database.
     * @param {verification_logsCreateManyAndReturnArgs} args - Arguments to create many Verification_logs.
     * @example
     * // Create many Verification_logs
     * const verification_logs = await prisma.verification_logs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verification_logs and only return the `id`
     * const verification_logsWithIdOnly = await prisma.verification_logs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends verification_logsCreateManyAndReturnArgs>(args?: SelectSubset<T, verification_logsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification_logs.
     * @param {verification_logsDeleteArgs} args - Arguments to delete one Verification_logs.
     * @example
     * // Delete one Verification_logs
     * const Verification_logs = await prisma.verification_logs.delete({
     *   where: {
     *     // ... filter to delete one Verification_logs
     *   }
     * })
     * 
     */
    delete<T extends verification_logsDeleteArgs>(args: SelectSubset<T, verification_logsDeleteArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification_logs.
     * @param {verification_logsUpdateArgs} args - Arguments to update one Verification_logs.
     * @example
     * // Update one Verification_logs
     * const verification_logs = await prisma.verification_logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends verification_logsUpdateArgs>(args: SelectSubset<T, verification_logsUpdateArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verification_logs.
     * @param {verification_logsDeleteManyArgs} args - Arguments to filter Verification_logs to delete.
     * @example
     * // Delete a few Verification_logs
     * const { count } = await prisma.verification_logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends verification_logsDeleteManyArgs>(args?: SelectSubset<T, verification_logsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verification_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verification_logs
     * const verification_logs = await prisma.verification_logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends verification_logsUpdateManyArgs>(args: SelectSubset<T, verification_logsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verification_logs and returns the data updated in the database.
     * @param {verification_logsUpdateManyAndReturnArgs} args - Arguments to update many Verification_logs.
     * @example
     * // Update many Verification_logs
     * const verification_logs = await prisma.verification_logs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verification_logs and only return the `id`
     * const verification_logsWithIdOnly = await prisma.verification_logs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends verification_logsUpdateManyAndReturnArgs>(args: SelectSubset<T, verification_logsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification_logs.
     * @param {verification_logsUpsertArgs} args - Arguments to update or create a Verification_logs.
     * @example
     * // Update or create a Verification_logs
     * const verification_logs = await prisma.verification_logs.upsert({
     *   create: {
     *     // ... data to create a Verification_logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification_logs we want to update
     *   }
     * })
     */
    upsert<T extends verification_logsUpsertArgs>(args: SelectSubset<T, verification_logsUpsertArgs<ExtArgs>>): Prisma__verification_logsClient<$Result.GetResult<Prisma.$verification_logsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verification_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsCountArgs} args - Arguments to filter Verification_logs to count.
     * @example
     * // Count the number of Verification_logs
     * const count = await prisma.verification_logs.count({
     *   where: {
     *     // ... the filter for the Verification_logs we want to count
     *   }
     * })
    **/
    count<T extends verification_logsCountArgs>(
      args?: Subset<T, verification_logsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Verification_logsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Verification_logsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Verification_logsAggregateArgs>(args: Subset<T, Verification_logsAggregateArgs>): Prisma.PrismaPromise<GetVerification_logsAggregateType<T>>

    /**
     * Group by Verification_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {verification_logsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends verification_logsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: verification_logsGroupByArgs['orderBy'] }
        : { orderBy?: verification_logsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, verification_logsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerification_logsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the verification_logs model
   */
  readonly fields: verification_logsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for verification_logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__verification_logsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends verification_logs$userArgs<ExtArgs> = {}>(args?: Subset<T, verification_logs$userArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the verification_logs model
   */
  interface verification_logsFieldRefs {
    readonly id: FieldRef<"verification_logs", 'String'>
    readonly user_id: FieldRef<"verification_logs", 'String'>
    readonly face_id: FieldRef<"verification_logs", 'String'>
    readonly mask_detected: FieldRef<"verification_logs", 'Boolean'>
    readonly result: FieldRef<"verification_logs", 'Boolean'>
    readonly confidence: FieldRef<"verification_logs", 'Float'>
    readonly verified_at: FieldRef<"verification_logs", 'DateTime'>
    readonly is_spoofing: FieldRef<"verification_logs", 'Boolean'>
    readonly meta_data: FieldRef<"verification_logs", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * verification_logs findUnique
   */
  export type verification_logsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter, which verification_logs to fetch.
     */
    where: verification_logsWhereUniqueInput
  }

  /**
   * verification_logs findUniqueOrThrow
   */
  export type verification_logsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter, which verification_logs to fetch.
     */
    where: verification_logsWhereUniqueInput
  }

  /**
   * verification_logs findFirst
   */
  export type verification_logsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter, which verification_logs to fetch.
     */
    where?: verification_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verification_logs to fetch.
     */
    orderBy?: verification_logsOrderByWithRelationInput | verification_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verification_logs.
     */
    cursor?: verification_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verification_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verification_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verification_logs.
     */
    distinct?: Verification_logsScalarFieldEnum | Verification_logsScalarFieldEnum[]
  }

  /**
   * verification_logs findFirstOrThrow
   */
  export type verification_logsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter, which verification_logs to fetch.
     */
    where?: verification_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verification_logs to fetch.
     */
    orderBy?: verification_logsOrderByWithRelationInput | verification_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for verification_logs.
     */
    cursor?: verification_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verification_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verification_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of verification_logs.
     */
    distinct?: Verification_logsScalarFieldEnum | Verification_logsScalarFieldEnum[]
  }

  /**
   * verification_logs findMany
   */
  export type verification_logsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter, which verification_logs to fetch.
     */
    where?: verification_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of verification_logs to fetch.
     */
    orderBy?: verification_logsOrderByWithRelationInput | verification_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing verification_logs.
     */
    cursor?: verification_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` verification_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` verification_logs.
     */
    skip?: number
    distinct?: Verification_logsScalarFieldEnum | Verification_logsScalarFieldEnum[]
  }

  /**
   * verification_logs create
   */
  export type verification_logsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * The data needed to create a verification_logs.
     */
    data: XOR<verification_logsCreateInput, verification_logsUncheckedCreateInput>
  }

  /**
   * verification_logs createMany
   */
  export type verification_logsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many verification_logs.
     */
    data: verification_logsCreateManyInput | verification_logsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * verification_logs createManyAndReturn
   */
  export type verification_logsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * The data used to create many verification_logs.
     */
    data: verification_logsCreateManyInput | verification_logsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * verification_logs update
   */
  export type verification_logsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * The data needed to update a verification_logs.
     */
    data: XOR<verification_logsUpdateInput, verification_logsUncheckedUpdateInput>
    /**
     * Choose, which verification_logs to update.
     */
    where: verification_logsWhereUniqueInput
  }

  /**
   * verification_logs updateMany
   */
  export type verification_logsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update verification_logs.
     */
    data: XOR<verification_logsUpdateManyMutationInput, verification_logsUncheckedUpdateManyInput>
    /**
     * Filter which verification_logs to update
     */
    where?: verification_logsWhereInput
    /**
     * Limit how many verification_logs to update.
     */
    limit?: number
  }

  /**
   * verification_logs updateManyAndReturn
   */
  export type verification_logsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * The data used to update verification_logs.
     */
    data: XOR<verification_logsUpdateManyMutationInput, verification_logsUncheckedUpdateManyInput>
    /**
     * Filter which verification_logs to update
     */
    where?: verification_logsWhereInput
    /**
     * Limit how many verification_logs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * verification_logs upsert
   */
  export type verification_logsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * The filter to search for the verification_logs to update in case it exists.
     */
    where: verification_logsWhereUniqueInput
    /**
     * In case the verification_logs found by the `where` argument doesn't exist, create a new verification_logs with this data.
     */
    create: XOR<verification_logsCreateInput, verification_logsUncheckedCreateInput>
    /**
     * In case the verification_logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<verification_logsUpdateInput, verification_logsUncheckedUpdateInput>
  }

  /**
   * verification_logs delete
   */
  export type verification_logsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
    /**
     * Filter which verification_logs to delete.
     */
    where: verification_logsWhereUniqueInput
  }

  /**
   * verification_logs deleteMany
   */
  export type verification_logsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which verification_logs to delete
     */
    where?: verification_logsWhereInput
    /**
     * Limit how many verification_logs to delete.
     */
    limit?: number
  }

  /**
   * verification_logs.user
   */
  export type verification_logs$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * verification_logs without action
   */
  export type verification_logsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the verification_logs
     */
    select?: verification_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the verification_logs
     */
    omit?: verification_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: verification_logsInclude<ExtArgs> | null
  }


  /**
   * Model face_registrations
   */

  export type AggregateFace_registrations = {
    _count: Face_registrationsCountAggregateOutputType | null
    _min: Face_registrationsMinAggregateOutputType | null
    _max: Face_registrationsMaxAggregateOutputType | null
  }

  export type Face_registrationsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    face_id_without_mask: string | null
    face_id_with_mask: string | null
    status: string | null
    registered_at: Date | null
  }

  export type Face_registrationsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    face_id_without_mask: string | null
    face_id_with_mask: string | null
    status: string | null
    registered_at: Date | null
  }

  export type Face_registrationsCountAggregateOutputType = {
    id: number
    user_id: number
    face_id_without_mask: number
    face_id_with_mask: number
    status: number
    registered_at: number
    _all: number
  }


  export type Face_registrationsMinAggregateInputType = {
    id?: true
    user_id?: true
    face_id_without_mask?: true
    face_id_with_mask?: true
    status?: true
    registered_at?: true
  }

  export type Face_registrationsMaxAggregateInputType = {
    id?: true
    user_id?: true
    face_id_without_mask?: true
    face_id_with_mask?: true
    status?: true
    registered_at?: true
  }

  export type Face_registrationsCountAggregateInputType = {
    id?: true
    user_id?: true
    face_id_without_mask?: true
    face_id_with_mask?: true
    status?: true
    registered_at?: true
    _all?: true
  }

  export type Face_registrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which face_registrations to aggregate.
     */
    where?: face_registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of face_registrations to fetch.
     */
    orderBy?: face_registrationsOrderByWithRelationInput | face_registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: face_registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` face_registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` face_registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned face_registrations
    **/
    _count?: true | Face_registrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Face_registrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Face_registrationsMaxAggregateInputType
  }

  export type GetFace_registrationsAggregateType<T extends Face_registrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateFace_registrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFace_registrations[P]>
      : GetScalarType<T[P], AggregateFace_registrations[P]>
  }




  export type face_registrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: face_registrationsWhereInput
    orderBy?: face_registrationsOrderByWithAggregationInput | face_registrationsOrderByWithAggregationInput[]
    by: Face_registrationsScalarFieldEnum[] | Face_registrationsScalarFieldEnum
    having?: face_registrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Face_registrationsCountAggregateInputType | true
    _min?: Face_registrationsMinAggregateInputType
    _max?: Face_registrationsMaxAggregateInputType
  }

  export type Face_registrationsGroupByOutputType = {
    id: string
    user_id: string | null
    face_id_without_mask: string
    face_id_with_mask: string | null
    status: string
    registered_at: Date
    _count: Face_registrationsCountAggregateOutputType | null
    _min: Face_registrationsMinAggregateOutputType | null
    _max: Face_registrationsMaxAggregateOutputType | null
  }

  type GetFace_registrationsGroupByPayload<T extends face_registrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Face_registrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Face_registrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Face_registrationsGroupByOutputType[P]>
            : GetScalarType<T[P], Face_registrationsGroupByOutputType[P]>
        }
      >
    >


  export type face_registrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id_without_mask?: boolean
    face_id_with_mask?: boolean
    status?: boolean
    registered_at?: boolean
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }, ExtArgs["result"]["face_registrations"]>

  export type face_registrationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id_without_mask?: boolean
    face_id_with_mask?: boolean
    status?: boolean
    registered_at?: boolean
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }, ExtArgs["result"]["face_registrations"]>

  export type face_registrationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    face_id_without_mask?: boolean
    face_id_with_mask?: boolean
    status?: boolean
    registered_at?: boolean
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }, ExtArgs["result"]["face_registrations"]>

  export type face_registrationsSelectScalar = {
    id?: boolean
    user_id?: boolean
    face_id_without_mask?: boolean
    face_id_with_mask?: boolean
    status?: boolean
    registered_at?: boolean
  }

  export type face_registrationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "face_id_without_mask" | "face_id_with_mask" | "status" | "registered_at", ExtArgs["result"]["face_registrations"]>
  export type face_registrationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }
  export type face_registrationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }
  export type face_registrationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | face_registrations$userArgs<ExtArgs>
  }

  export type $face_registrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "face_registrations"
    objects: {
      user: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string | null
      face_id_without_mask: string
      face_id_with_mask: string | null
      status: string
      registered_at: Date
    }, ExtArgs["result"]["face_registrations"]>
    composites: {}
  }

  type face_registrationsGetPayload<S extends boolean | null | undefined | face_registrationsDefaultArgs> = $Result.GetResult<Prisma.$face_registrationsPayload, S>

  type face_registrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<face_registrationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Face_registrationsCountAggregateInputType | true
    }

  export interface face_registrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['face_registrations'], meta: { name: 'face_registrations' } }
    /**
     * Find zero or one Face_registrations that matches the filter.
     * @param {face_registrationsFindUniqueArgs} args - Arguments to find a Face_registrations
     * @example
     * // Get one Face_registrations
     * const face_registrations = await prisma.face_registrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends face_registrationsFindUniqueArgs>(args: SelectSubset<T, face_registrationsFindUniqueArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Face_registrations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {face_registrationsFindUniqueOrThrowArgs} args - Arguments to find a Face_registrations
     * @example
     * // Get one Face_registrations
     * const face_registrations = await prisma.face_registrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends face_registrationsFindUniqueOrThrowArgs>(args: SelectSubset<T, face_registrationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Face_registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsFindFirstArgs} args - Arguments to find a Face_registrations
     * @example
     * // Get one Face_registrations
     * const face_registrations = await prisma.face_registrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends face_registrationsFindFirstArgs>(args?: SelectSubset<T, face_registrationsFindFirstArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Face_registrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsFindFirstOrThrowArgs} args - Arguments to find a Face_registrations
     * @example
     * // Get one Face_registrations
     * const face_registrations = await prisma.face_registrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends face_registrationsFindFirstOrThrowArgs>(args?: SelectSubset<T, face_registrationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Face_registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Face_registrations
     * const face_registrations = await prisma.face_registrations.findMany()
     * 
     * // Get first 10 Face_registrations
     * const face_registrations = await prisma.face_registrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const face_registrationsWithIdOnly = await prisma.face_registrations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends face_registrationsFindManyArgs>(args?: SelectSubset<T, face_registrationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Face_registrations.
     * @param {face_registrationsCreateArgs} args - Arguments to create a Face_registrations.
     * @example
     * // Create one Face_registrations
     * const Face_registrations = await prisma.face_registrations.create({
     *   data: {
     *     // ... data to create a Face_registrations
     *   }
     * })
     * 
     */
    create<T extends face_registrationsCreateArgs>(args: SelectSubset<T, face_registrationsCreateArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Face_registrations.
     * @param {face_registrationsCreateManyArgs} args - Arguments to create many Face_registrations.
     * @example
     * // Create many Face_registrations
     * const face_registrations = await prisma.face_registrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends face_registrationsCreateManyArgs>(args?: SelectSubset<T, face_registrationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Face_registrations and returns the data saved in the database.
     * @param {face_registrationsCreateManyAndReturnArgs} args - Arguments to create many Face_registrations.
     * @example
     * // Create many Face_registrations
     * const face_registrations = await prisma.face_registrations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Face_registrations and only return the `id`
     * const face_registrationsWithIdOnly = await prisma.face_registrations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends face_registrationsCreateManyAndReturnArgs>(args?: SelectSubset<T, face_registrationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Face_registrations.
     * @param {face_registrationsDeleteArgs} args - Arguments to delete one Face_registrations.
     * @example
     * // Delete one Face_registrations
     * const Face_registrations = await prisma.face_registrations.delete({
     *   where: {
     *     // ... filter to delete one Face_registrations
     *   }
     * })
     * 
     */
    delete<T extends face_registrationsDeleteArgs>(args: SelectSubset<T, face_registrationsDeleteArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Face_registrations.
     * @param {face_registrationsUpdateArgs} args - Arguments to update one Face_registrations.
     * @example
     * // Update one Face_registrations
     * const face_registrations = await prisma.face_registrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends face_registrationsUpdateArgs>(args: SelectSubset<T, face_registrationsUpdateArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Face_registrations.
     * @param {face_registrationsDeleteManyArgs} args - Arguments to filter Face_registrations to delete.
     * @example
     * // Delete a few Face_registrations
     * const { count } = await prisma.face_registrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends face_registrationsDeleteManyArgs>(args?: SelectSubset<T, face_registrationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Face_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Face_registrations
     * const face_registrations = await prisma.face_registrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends face_registrationsUpdateManyArgs>(args: SelectSubset<T, face_registrationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Face_registrations and returns the data updated in the database.
     * @param {face_registrationsUpdateManyAndReturnArgs} args - Arguments to update many Face_registrations.
     * @example
     * // Update many Face_registrations
     * const face_registrations = await prisma.face_registrations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Face_registrations and only return the `id`
     * const face_registrationsWithIdOnly = await prisma.face_registrations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends face_registrationsUpdateManyAndReturnArgs>(args: SelectSubset<T, face_registrationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Face_registrations.
     * @param {face_registrationsUpsertArgs} args - Arguments to update or create a Face_registrations.
     * @example
     * // Update or create a Face_registrations
     * const face_registrations = await prisma.face_registrations.upsert({
     *   create: {
     *     // ... data to create a Face_registrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Face_registrations we want to update
     *   }
     * })
     */
    upsert<T extends face_registrationsUpsertArgs>(args: SelectSubset<T, face_registrationsUpsertArgs<ExtArgs>>): Prisma__face_registrationsClient<$Result.GetResult<Prisma.$face_registrationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Face_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsCountArgs} args - Arguments to filter Face_registrations to count.
     * @example
     * // Count the number of Face_registrations
     * const count = await prisma.face_registrations.count({
     *   where: {
     *     // ... the filter for the Face_registrations we want to count
     *   }
     * })
    **/
    count<T extends face_registrationsCountArgs>(
      args?: Subset<T, face_registrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Face_registrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Face_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Face_registrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Face_registrationsAggregateArgs>(args: Subset<T, Face_registrationsAggregateArgs>): Prisma.PrismaPromise<GetFace_registrationsAggregateType<T>>

    /**
     * Group by Face_registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {face_registrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends face_registrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: face_registrationsGroupByArgs['orderBy'] }
        : { orderBy?: face_registrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, face_registrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFace_registrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the face_registrations model
   */
  readonly fields: face_registrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for face_registrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__face_registrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends face_registrations$userArgs<ExtArgs> = {}>(args?: Subset<T, face_registrations$userArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the face_registrations model
   */
  interface face_registrationsFieldRefs {
    readonly id: FieldRef<"face_registrations", 'String'>
    readonly user_id: FieldRef<"face_registrations", 'String'>
    readonly face_id_without_mask: FieldRef<"face_registrations", 'String'>
    readonly face_id_with_mask: FieldRef<"face_registrations", 'String'>
    readonly status: FieldRef<"face_registrations", 'String'>
    readonly registered_at: FieldRef<"face_registrations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * face_registrations findUnique
   */
  export type face_registrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter, which face_registrations to fetch.
     */
    where: face_registrationsWhereUniqueInput
  }

  /**
   * face_registrations findUniqueOrThrow
   */
  export type face_registrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter, which face_registrations to fetch.
     */
    where: face_registrationsWhereUniqueInput
  }

  /**
   * face_registrations findFirst
   */
  export type face_registrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter, which face_registrations to fetch.
     */
    where?: face_registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of face_registrations to fetch.
     */
    orderBy?: face_registrationsOrderByWithRelationInput | face_registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for face_registrations.
     */
    cursor?: face_registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` face_registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` face_registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of face_registrations.
     */
    distinct?: Face_registrationsScalarFieldEnum | Face_registrationsScalarFieldEnum[]
  }

  /**
   * face_registrations findFirstOrThrow
   */
  export type face_registrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter, which face_registrations to fetch.
     */
    where?: face_registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of face_registrations to fetch.
     */
    orderBy?: face_registrationsOrderByWithRelationInput | face_registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for face_registrations.
     */
    cursor?: face_registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` face_registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` face_registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of face_registrations.
     */
    distinct?: Face_registrationsScalarFieldEnum | Face_registrationsScalarFieldEnum[]
  }

  /**
   * face_registrations findMany
   */
  export type face_registrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter, which face_registrations to fetch.
     */
    where?: face_registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of face_registrations to fetch.
     */
    orderBy?: face_registrationsOrderByWithRelationInput | face_registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing face_registrations.
     */
    cursor?: face_registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` face_registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` face_registrations.
     */
    skip?: number
    distinct?: Face_registrationsScalarFieldEnum | Face_registrationsScalarFieldEnum[]
  }

  /**
   * face_registrations create
   */
  export type face_registrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * The data needed to create a face_registrations.
     */
    data: XOR<face_registrationsCreateInput, face_registrationsUncheckedCreateInput>
  }

  /**
   * face_registrations createMany
   */
  export type face_registrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many face_registrations.
     */
    data: face_registrationsCreateManyInput | face_registrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * face_registrations createManyAndReturn
   */
  export type face_registrationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * The data used to create many face_registrations.
     */
    data: face_registrationsCreateManyInput | face_registrationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * face_registrations update
   */
  export type face_registrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * The data needed to update a face_registrations.
     */
    data: XOR<face_registrationsUpdateInput, face_registrationsUncheckedUpdateInput>
    /**
     * Choose, which face_registrations to update.
     */
    where: face_registrationsWhereUniqueInput
  }

  /**
   * face_registrations updateMany
   */
  export type face_registrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update face_registrations.
     */
    data: XOR<face_registrationsUpdateManyMutationInput, face_registrationsUncheckedUpdateManyInput>
    /**
     * Filter which face_registrations to update
     */
    where?: face_registrationsWhereInput
    /**
     * Limit how many face_registrations to update.
     */
    limit?: number
  }

  /**
   * face_registrations updateManyAndReturn
   */
  export type face_registrationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * The data used to update face_registrations.
     */
    data: XOR<face_registrationsUpdateManyMutationInput, face_registrationsUncheckedUpdateManyInput>
    /**
     * Filter which face_registrations to update
     */
    where?: face_registrationsWhereInput
    /**
     * Limit how many face_registrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * face_registrations upsert
   */
  export type face_registrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * The filter to search for the face_registrations to update in case it exists.
     */
    where: face_registrationsWhereUniqueInput
    /**
     * In case the face_registrations found by the `where` argument doesn't exist, create a new face_registrations with this data.
     */
    create: XOR<face_registrationsCreateInput, face_registrationsUncheckedCreateInput>
    /**
     * In case the face_registrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<face_registrationsUpdateInput, face_registrationsUncheckedUpdateInput>
  }

  /**
   * face_registrations delete
   */
  export type face_registrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
    /**
     * Filter which face_registrations to delete.
     */
    where: face_registrationsWhereUniqueInput
  }

  /**
   * face_registrations deleteMany
   */
  export type face_registrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which face_registrations to delete
     */
    where?: face_registrationsWhereInput
    /**
     * Limit how many face_registrations to delete.
     */
    limit?: number
  }

  /**
   * face_registrations.user
   */
  export type face_registrations$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * face_registrations without action
   */
  export type face_registrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the face_registrations
     */
    select?: face_registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the face_registrations
     */
    omit?: face_registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: face_registrationsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    full_name: 'full_name',
    created_at: 'created_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Verification_logsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    face_id: 'face_id',
    mask_detected: 'mask_detected',
    result: 'result',
    confidence: 'confidence',
    verified_at: 'verified_at',
    is_spoofing: 'is_spoofing',
    meta_data: 'meta_data'
  };

  export type Verification_logsScalarFieldEnum = (typeof Verification_logsScalarFieldEnum)[keyof typeof Verification_logsScalarFieldEnum]


  export const Face_registrationsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    face_id_without_mask: 'face_id_without_mask',
    face_id_with_mask: 'face_id_with_mask',
    status: 'status',
    registered_at: 'registered_at'
  };

  export type Face_registrationsScalarFieldEnum = (typeof Face_registrationsScalarFieldEnum)[keyof typeof Face_registrationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    username?: StringFilter<"users"> | string
    full_name?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    verification_logs?: Verification_logsListRelationFilter
    face_registrations?: Face_registrationsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    full_name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    verification_logs?: verification_logsOrderByRelationAggregateInput
    face_registrations?: face_registrationsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    full_name?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    verification_logs?: Verification_logsListRelationFilter
    face_registrations?: Face_registrationsListRelationFilter
  }, "id" | "username">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    full_name?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    username?: StringWithAggregatesFilter<"users"> | string
    full_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type verification_logsWhereInput = {
    AND?: verification_logsWhereInput | verification_logsWhereInput[]
    OR?: verification_logsWhereInput[]
    NOT?: verification_logsWhereInput | verification_logsWhereInput[]
    id?: StringFilter<"verification_logs"> | string
    user_id?: StringNullableFilter<"verification_logs"> | string | null
    face_id?: StringNullableFilter<"verification_logs"> | string | null
    mask_detected?: BoolFilter<"verification_logs"> | boolean
    result?: BoolFilter<"verification_logs"> | boolean
    confidence?: FloatFilter<"verification_logs"> | number
    verified_at?: DateTimeFilter<"verification_logs"> | Date | string
    is_spoofing?: BoolFilter<"verification_logs"> | boolean
    meta_data?: JsonNullableFilter<"verification_logs">
    user?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type verification_logsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    face_id?: SortOrderInput | SortOrder
    mask_detected?: SortOrder
    result?: SortOrder
    confidence?: SortOrder
    verified_at?: SortOrder
    is_spoofing?: SortOrder
    meta_data?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type verification_logsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: verification_logsWhereInput | verification_logsWhereInput[]
    OR?: verification_logsWhereInput[]
    NOT?: verification_logsWhereInput | verification_logsWhereInput[]
    user_id?: StringNullableFilter<"verification_logs"> | string | null
    face_id?: StringNullableFilter<"verification_logs"> | string | null
    mask_detected?: BoolFilter<"verification_logs"> | boolean
    result?: BoolFilter<"verification_logs"> | boolean
    confidence?: FloatFilter<"verification_logs"> | number
    verified_at?: DateTimeFilter<"verification_logs"> | Date | string
    is_spoofing?: BoolFilter<"verification_logs"> | boolean
    meta_data?: JsonNullableFilter<"verification_logs">
    user?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type verification_logsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    face_id?: SortOrderInput | SortOrder
    mask_detected?: SortOrder
    result?: SortOrder
    confidence?: SortOrder
    verified_at?: SortOrder
    is_spoofing?: SortOrder
    meta_data?: SortOrderInput | SortOrder
    _count?: verification_logsCountOrderByAggregateInput
    _avg?: verification_logsAvgOrderByAggregateInput
    _max?: verification_logsMaxOrderByAggregateInput
    _min?: verification_logsMinOrderByAggregateInput
    _sum?: verification_logsSumOrderByAggregateInput
  }

  export type verification_logsScalarWhereWithAggregatesInput = {
    AND?: verification_logsScalarWhereWithAggregatesInput | verification_logsScalarWhereWithAggregatesInput[]
    OR?: verification_logsScalarWhereWithAggregatesInput[]
    NOT?: verification_logsScalarWhereWithAggregatesInput | verification_logsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"verification_logs"> | string
    user_id?: StringNullableWithAggregatesFilter<"verification_logs"> | string | null
    face_id?: StringNullableWithAggregatesFilter<"verification_logs"> | string | null
    mask_detected?: BoolWithAggregatesFilter<"verification_logs"> | boolean
    result?: BoolWithAggregatesFilter<"verification_logs"> | boolean
    confidence?: FloatWithAggregatesFilter<"verification_logs"> | number
    verified_at?: DateTimeWithAggregatesFilter<"verification_logs"> | Date | string
    is_spoofing?: BoolWithAggregatesFilter<"verification_logs"> | boolean
    meta_data?: JsonNullableWithAggregatesFilter<"verification_logs">
  }

  export type face_registrationsWhereInput = {
    AND?: face_registrationsWhereInput | face_registrationsWhereInput[]
    OR?: face_registrationsWhereInput[]
    NOT?: face_registrationsWhereInput | face_registrationsWhereInput[]
    id?: StringFilter<"face_registrations"> | string
    user_id?: StringNullableFilter<"face_registrations"> | string | null
    face_id_without_mask?: StringFilter<"face_registrations"> | string
    face_id_with_mask?: StringNullableFilter<"face_registrations"> | string | null
    status?: StringFilter<"face_registrations"> | string
    registered_at?: DateTimeFilter<"face_registrations"> | Date | string
    user?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type face_registrationsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    face_id_without_mask?: SortOrder
    face_id_with_mask?: SortOrderInput | SortOrder
    status?: SortOrder
    registered_at?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type face_registrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    face_id_without_mask?: string
    face_id_with_mask?: string
    AND?: face_registrationsWhereInput | face_registrationsWhereInput[]
    OR?: face_registrationsWhereInput[]
    NOT?: face_registrationsWhereInput | face_registrationsWhereInput[]
    user_id?: StringNullableFilter<"face_registrations"> | string | null
    status?: StringFilter<"face_registrations"> | string
    registered_at?: DateTimeFilter<"face_registrations"> | Date | string
    user?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id" | "face_id_without_mask" | "face_id_with_mask">

  export type face_registrationsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    face_id_without_mask?: SortOrder
    face_id_with_mask?: SortOrderInput | SortOrder
    status?: SortOrder
    registered_at?: SortOrder
    _count?: face_registrationsCountOrderByAggregateInput
    _max?: face_registrationsMaxOrderByAggregateInput
    _min?: face_registrationsMinOrderByAggregateInput
  }

  export type face_registrationsScalarWhereWithAggregatesInput = {
    AND?: face_registrationsScalarWhereWithAggregatesInput | face_registrationsScalarWhereWithAggregatesInput[]
    OR?: face_registrationsScalarWhereWithAggregatesInput[]
    NOT?: face_registrationsScalarWhereWithAggregatesInput | face_registrationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"face_registrations"> | string
    user_id?: StringNullableWithAggregatesFilter<"face_registrations"> | string | null
    face_id_without_mask?: StringWithAggregatesFilter<"face_registrations"> | string
    face_id_with_mask?: StringNullableWithAggregatesFilter<"face_registrations"> | string | null
    status?: StringWithAggregatesFilter<"face_registrations"> | string
    registered_at?: DateTimeWithAggregatesFilter<"face_registrations"> | Date | string
  }

  export type usersCreateInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    verification_logs?: verification_logsCreateNestedManyWithoutUserInput
    face_registrations?: face_registrationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    verification_logs?: verification_logsUncheckedCreateNestedManyWithoutUserInput
    face_registrations?: face_registrationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verification_logs?: verification_logsUpdateManyWithoutUserNestedInput
    face_registrations?: face_registrationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verification_logs?: verification_logsUncheckedUpdateManyWithoutUserNestedInput
    face_registrations?: face_registrationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type verification_logsCreateInput = {
    id?: string
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
    user?: usersCreateNestedOneWithoutVerification_logsInput
  }

  export type verification_logsUncheckedCreateInput = {
    id?: string
    user_id?: string | null
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
    user?: usersUpdateOneWithoutVerification_logsNestedInput
  }

  export type verification_logsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsCreateManyInput = {
    id?: string
    user_id?: string | null
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type face_registrationsCreateInput = {
    id?: string
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
    user?: usersCreateNestedOneWithoutFace_registrationsInput
  }

  export type face_registrationsUncheckedCreateInput = {
    id?: string
    user_id?: string | null
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
  }

  export type face_registrationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneWithoutFace_registrationsNestedInput
  }

  export type face_registrationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type face_registrationsCreateManyInput = {
    id?: string
    user_id?: string | null
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
  }

  export type face_registrationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type face_registrationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Verification_logsListRelationFilter = {
    every?: verification_logsWhereInput
    some?: verification_logsWhereInput
    none?: verification_logsWhereInput
  }

  export type Face_registrationsListRelationFilter = {
    every?: face_registrationsWhereInput
    some?: face_registrationsWhereInput
    none?: face_registrationsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type verification_logsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type face_registrationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    created_at?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    created_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    full_name?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type verification_logsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id?: SortOrder
    mask_detected?: SortOrder
    result?: SortOrder
    confidence?: SortOrder
    verified_at?: SortOrder
    is_spoofing?: SortOrder
    meta_data?: SortOrder
  }

  export type verification_logsAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type verification_logsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id?: SortOrder
    mask_detected?: SortOrder
    result?: SortOrder
    confidence?: SortOrder
    verified_at?: SortOrder
    is_spoofing?: SortOrder
  }

  export type verification_logsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id?: SortOrder
    mask_detected?: SortOrder
    result?: SortOrder
    confidence?: SortOrder
    verified_at?: SortOrder
    is_spoofing?: SortOrder
  }

  export type verification_logsSumOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type face_registrationsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id_without_mask?: SortOrder
    face_id_with_mask?: SortOrder
    status?: SortOrder
    registered_at?: SortOrder
  }

  export type face_registrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id_without_mask?: SortOrder
    face_id_with_mask?: SortOrder
    status?: SortOrder
    registered_at?: SortOrder
  }

  export type face_registrationsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    face_id_without_mask?: SortOrder
    face_id_with_mask?: SortOrder
    status?: SortOrder
    registered_at?: SortOrder
  }

  export type verification_logsCreateNestedManyWithoutUserInput = {
    create?: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput> | verification_logsCreateWithoutUserInput[] | verification_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: verification_logsCreateOrConnectWithoutUserInput | verification_logsCreateOrConnectWithoutUserInput[]
    createMany?: verification_logsCreateManyUserInputEnvelope
    connect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
  }

  export type face_registrationsCreateNestedManyWithoutUserInput = {
    create?: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput> | face_registrationsCreateWithoutUserInput[] | face_registrationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: face_registrationsCreateOrConnectWithoutUserInput | face_registrationsCreateOrConnectWithoutUserInput[]
    createMany?: face_registrationsCreateManyUserInputEnvelope
    connect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
  }

  export type verification_logsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput> | verification_logsCreateWithoutUserInput[] | verification_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: verification_logsCreateOrConnectWithoutUserInput | verification_logsCreateOrConnectWithoutUserInput[]
    createMany?: verification_logsCreateManyUserInputEnvelope
    connect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
  }

  export type face_registrationsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput> | face_registrationsCreateWithoutUserInput[] | face_registrationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: face_registrationsCreateOrConnectWithoutUserInput | face_registrationsCreateOrConnectWithoutUserInput[]
    createMany?: face_registrationsCreateManyUserInputEnvelope
    connect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type verification_logsUpdateManyWithoutUserNestedInput = {
    create?: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput> | verification_logsCreateWithoutUserInput[] | verification_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: verification_logsCreateOrConnectWithoutUserInput | verification_logsCreateOrConnectWithoutUserInput[]
    upsert?: verification_logsUpsertWithWhereUniqueWithoutUserInput | verification_logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: verification_logsCreateManyUserInputEnvelope
    set?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    disconnect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    delete?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    connect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    update?: verification_logsUpdateWithWhereUniqueWithoutUserInput | verification_logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: verification_logsUpdateManyWithWhereWithoutUserInput | verification_logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: verification_logsScalarWhereInput | verification_logsScalarWhereInput[]
  }

  export type face_registrationsUpdateManyWithoutUserNestedInput = {
    create?: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput> | face_registrationsCreateWithoutUserInput[] | face_registrationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: face_registrationsCreateOrConnectWithoutUserInput | face_registrationsCreateOrConnectWithoutUserInput[]
    upsert?: face_registrationsUpsertWithWhereUniqueWithoutUserInput | face_registrationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: face_registrationsCreateManyUserInputEnvelope
    set?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    disconnect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    delete?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    connect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    update?: face_registrationsUpdateWithWhereUniqueWithoutUserInput | face_registrationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: face_registrationsUpdateManyWithWhereWithoutUserInput | face_registrationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: face_registrationsScalarWhereInput | face_registrationsScalarWhereInput[]
  }

  export type verification_logsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput> | verification_logsCreateWithoutUserInput[] | verification_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: verification_logsCreateOrConnectWithoutUserInput | verification_logsCreateOrConnectWithoutUserInput[]
    upsert?: verification_logsUpsertWithWhereUniqueWithoutUserInput | verification_logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: verification_logsCreateManyUserInputEnvelope
    set?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    disconnect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    delete?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    connect?: verification_logsWhereUniqueInput | verification_logsWhereUniqueInput[]
    update?: verification_logsUpdateWithWhereUniqueWithoutUserInput | verification_logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: verification_logsUpdateManyWithWhereWithoutUserInput | verification_logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: verification_logsScalarWhereInput | verification_logsScalarWhereInput[]
  }

  export type face_registrationsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput> | face_registrationsCreateWithoutUserInput[] | face_registrationsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: face_registrationsCreateOrConnectWithoutUserInput | face_registrationsCreateOrConnectWithoutUserInput[]
    upsert?: face_registrationsUpsertWithWhereUniqueWithoutUserInput | face_registrationsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: face_registrationsCreateManyUserInputEnvelope
    set?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    disconnect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    delete?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    connect?: face_registrationsWhereUniqueInput | face_registrationsWhereUniqueInput[]
    update?: face_registrationsUpdateWithWhereUniqueWithoutUserInput | face_registrationsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: face_registrationsUpdateManyWithWhereWithoutUserInput | face_registrationsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: face_registrationsScalarWhereInput | face_registrationsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutVerification_logsInput = {
    create?: XOR<usersCreateWithoutVerification_logsInput, usersUncheckedCreateWithoutVerification_logsInput>
    connectOrCreate?: usersCreateOrConnectWithoutVerification_logsInput
    connect?: usersWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneWithoutVerification_logsNestedInput = {
    create?: XOR<usersCreateWithoutVerification_logsInput, usersUncheckedCreateWithoutVerification_logsInput>
    connectOrCreate?: usersCreateOrConnectWithoutVerification_logsInput
    upsert?: usersUpsertWithoutVerification_logsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutVerification_logsInput, usersUpdateWithoutVerification_logsInput>, usersUncheckedUpdateWithoutVerification_logsInput>
  }

  export type usersCreateNestedOneWithoutFace_registrationsInput = {
    create?: XOR<usersCreateWithoutFace_registrationsInput, usersUncheckedCreateWithoutFace_registrationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutFace_registrationsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneWithoutFace_registrationsNestedInput = {
    create?: XOR<usersCreateWithoutFace_registrationsInput, usersUncheckedCreateWithoutFace_registrationsInput>
    connectOrCreate?: usersCreateOrConnectWithoutFace_registrationsInput
    upsert?: usersUpsertWithoutFace_registrationsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutFace_registrationsInput, usersUpdateWithoutFace_registrationsInput>, usersUncheckedUpdateWithoutFace_registrationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type verification_logsCreateWithoutUserInput = {
    id?: string
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUncheckedCreateWithoutUserInput = {
    id?: string
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsCreateOrConnectWithoutUserInput = {
    where: verification_logsWhereUniqueInput
    create: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput>
  }

  export type verification_logsCreateManyUserInputEnvelope = {
    data: verification_logsCreateManyUserInput | verification_logsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type face_registrationsCreateWithoutUserInput = {
    id?: string
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
  }

  export type face_registrationsUncheckedCreateWithoutUserInput = {
    id?: string
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
  }

  export type face_registrationsCreateOrConnectWithoutUserInput = {
    where: face_registrationsWhereUniqueInput
    create: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput>
  }

  export type face_registrationsCreateManyUserInputEnvelope = {
    data: face_registrationsCreateManyUserInput | face_registrationsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type verification_logsUpsertWithWhereUniqueWithoutUserInput = {
    where: verification_logsWhereUniqueInput
    update: XOR<verification_logsUpdateWithoutUserInput, verification_logsUncheckedUpdateWithoutUserInput>
    create: XOR<verification_logsCreateWithoutUserInput, verification_logsUncheckedCreateWithoutUserInput>
  }

  export type verification_logsUpdateWithWhereUniqueWithoutUserInput = {
    where: verification_logsWhereUniqueInput
    data: XOR<verification_logsUpdateWithoutUserInput, verification_logsUncheckedUpdateWithoutUserInput>
  }

  export type verification_logsUpdateManyWithWhereWithoutUserInput = {
    where: verification_logsScalarWhereInput
    data: XOR<verification_logsUpdateManyMutationInput, verification_logsUncheckedUpdateManyWithoutUserInput>
  }

  export type verification_logsScalarWhereInput = {
    AND?: verification_logsScalarWhereInput | verification_logsScalarWhereInput[]
    OR?: verification_logsScalarWhereInput[]
    NOT?: verification_logsScalarWhereInput | verification_logsScalarWhereInput[]
    id?: StringFilter<"verification_logs"> | string
    user_id?: StringNullableFilter<"verification_logs"> | string | null
    face_id?: StringNullableFilter<"verification_logs"> | string | null
    mask_detected?: BoolFilter<"verification_logs"> | boolean
    result?: BoolFilter<"verification_logs"> | boolean
    confidence?: FloatFilter<"verification_logs"> | number
    verified_at?: DateTimeFilter<"verification_logs"> | Date | string
    is_spoofing?: BoolFilter<"verification_logs"> | boolean
    meta_data?: JsonNullableFilter<"verification_logs">
  }

  export type face_registrationsUpsertWithWhereUniqueWithoutUserInput = {
    where: face_registrationsWhereUniqueInput
    update: XOR<face_registrationsUpdateWithoutUserInput, face_registrationsUncheckedUpdateWithoutUserInput>
    create: XOR<face_registrationsCreateWithoutUserInput, face_registrationsUncheckedCreateWithoutUserInput>
  }

  export type face_registrationsUpdateWithWhereUniqueWithoutUserInput = {
    where: face_registrationsWhereUniqueInput
    data: XOR<face_registrationsUpdateWithoutUserInput, face_registrationsUncheckedUpdateWithoutUserInput>
  }

  export type face_registrationsUpdateManyWithWhereWithoutUserInput = {
    where: face_registrationsScalarWhereInput
    data: XOR<face_registrationsUpdateManyMutationInput, face_registrationsUncheckedUpdateManyWithoutUserInput>
  }

  export type face_registrationsScalarWhereInput = {
    AND?: face_registrationsScalarWhereInput | face_registrationsScalarWhereInput[]
    OR?: face_registrationsScalarWhereInput[]
    NOT?: face_registrationsScalarWhereInput | face_registrationsScalarWhereInput[]
    id?: StringFilter<"face_registrations"> | string
    user_id?: StringNullableFilter<"face_registrations"> | string | null
    face_id_without_mask?: StringFilter<"face_registrations"> | string
    face_id_with_mask?: StringNullableFilter<"face_registrations"> | string | null
    status?: StringFilter<"face_registrations"> | string
    registered_at?: DateTimeFilter<"face_registrations"> | Date | string
  }

  export type usersCreateWithoutVerification_logsInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    face_registrations?: face_registrationsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutVerification_logsInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    face_registrations?: face_registrationsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutVerification_logsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutVerification_logsInput, usersUncheckedCreateWithoutVerification_logsInput>
  }

  export type usersUpsertWithoutVerification_logsInput = {
    update: XOR<usersUpdateWithoutVerification_logsInput, usersUncheckedUpdateWithoutVerification_logsInput>
    create: XOR<usersCreateWithoutVerification_logsInput, usersUncheckedCreateWithoutVerification_logsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutVerification_logsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutVerification_logsInput, usersUncheckedUpdateWithoutVerification_logsInput>
  }

  export type usersUpdateWithoutVerification_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    face_registrations?: face_registrationsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutVerification_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    face_registrations?: face_registrationsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutFace_registrationsInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    verification_logs?: verification_logsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutFace_registrationsInput = {
    id?: string
    username: string
    full_name?: string | null
    created_at?: Date | string | null
    verification_logs?: verification_logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutFace_registrationsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutFace_registrationsInput, usersUncheckedCreateWithoutFace_registrationsInput>
  }

  export type usersUpsertWithoutFace_registrationsInput = {
    update: XOR<usersUpdateWithoutFace_registrationsInput, usersUncheckedUpdateWithoutFace_registrationsInput>
    create: XOR<usersCreateWithoutFace_registrationsInput, usersUncheckedCreateWithoutFace_registrationsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutFace_registrationsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutFace_registrationsInput, usersUncheckedUpdateWithoutFace_registrationsInput>
  }

  export type usersUpdateWithoutFace_registrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verification_logs?: verification_logsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutFace_registrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    verification_logs?: verification_logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type verification_logsCreateManyUserInput = {
    id?: string
    face_id?: string | null
    mask_detected: boolean
    result: boolean
    confidence: number
    verified_at: Date | string
    is_spoofing: boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type face_registrationsCreateManyUserInput = {
    id?: string
    face_id_without_mask: string
    face_id_with_mask?: string | null
    status: string
    registered_at: Date | string
  }

  export type verification_logsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type verification_logsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id?: NullableStringFieldUpdateOperationsInput | string | null
    mask_detected?: BoolFieldUpdateOperationsInput | boolean
    result?: BoolFieldUpdateOperationsInput | boolean
    confidence?: FloatFieldUpdateOperationsInput | number
    verified_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_spoofing?: BoolFieldUpdateOperationsInput | boolean
    meta_data?: NullableJsonNullValueInput | InputJsonValue
  }

  export type face_registrationsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type face_registrationsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type face_registrationsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    face_id_without_mask?: StringFieldUpdateOperationsInput | string
    face_id_with_mask?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    registered_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}